//links up here
//https://script.google.com/macros/s/AKfycbwKqxxqnkRvU_IDkAhNDQwzVOUmrJlwvjf3BVXlGAaY/dev
//https://script.google.com/macros/s/AKfycbwD1k9N6wyWWMn1L4kQ7p0v4P0uokJ5Q0FTbNvOrvn_tsXHchrz/exec

/************************************************************************************************************
 * Engineer: Lizzy Hatfield (4625129)
 * Name: CoolGroup Newsletter Generator
 * Description: Script that generates and sends weekly newsletter emails via Google Forms, Sheets, and Docs
 * Ver: 2.0
 * © Lizzy Hatfield
************************************************************************************************************/


/* ----------------------issues/new ideas:
-triggered reminder email
-html output from normal announcement doc?
-check for end of entries
-auto select comic?
-error/malice-checking form sheet
->multiple entries from one person
->joke entries
->html breaking entries (</td>)
-bundle test/newsletter funcs
--------------------------------------- */


/*---------------------------------------------------------------------------Documentation-----------------------------------------------------------------------------
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                          .".
                         /  |
                        /  /
                       / ,"
           .-------.--- /
          "._ __.-/ o. o\  
             "   (    Y  )
                  )     /
                 /     (
                /       Y
            .-"         |
           /  _     \    \ 
          /    `. ". ) /' )
         Y       )( / /(,/
        ,|      /     )
       ( |     /     /
        " \_  (__   (__        [nabis]
            "-._,)--._,)

© Chris Johnson, 
http://www.chris.com/ascii/index.php?art=animals/rabbits
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


New in Version 1.1:
++reports can be sorted alphabetically by name
++depth of the ranges can be programmicably defined
++added copyright
++announcement/comic are now optional
++HTML saved in a separate folder
++clearData takes range as an input

New in Version 1.2:
++function testEmail() to test the output email
++function testAnnouncement() to test announcement for correct formatting added from Test-Funcs
++function testThisHTML() to test new HTML formatting file for email compatability added from Test-Funcs
++function sendReminder() to send a reminder email

New in Version 2.0:
++added GUI for running the script to control all the bells and whistles more cleanly
++main renamed to sendNewsletter
--sendNewsletter and testEmail called functions bundled to keep consistency between the two

for the future when you want to read announcements.doc as html:
   https://stackoverflow.com/questions/47299478/google-apps-script-docs-convert-selected-element-to-html/47313357#47313357

-a big THANK YOU to Jarva for translating the alpha version of this algorithm from Python to JavaScript/Google Script (and writing the getWeek() function!)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

//front end code


function doGet() {
  var html = HtmlService.createTemplateFromFile('Webpage').evaluate();
  html.setTitle("coolGroup Newsletter");
  return html; 
}

function include(filename) {
  return HtmlService.createHtmlOutputFromFile(filename)
      .setSandboxMode(HtmlService.SandboxMode.IFRAME)
      .getContent();
}


//backend code


/*==================================================================Main Functions====================================================================================

These are the top-level functions that execute all the tasks needed respectively. They are directly called by the GUI

-rewrite with functions bundled to keep consistency between testEmail and sendNewsletter
====================================================================================================================================================================*/
function sendNewsletter(doSort, AddAnn, AddComic) {
//define IDs and ranges for the Google Docs and Sheets
var form_sheet_id = '1nFi6f98GuG_46Xmg3V8WPoY0rtMK4LykOIW5QilFRiY';
var archive_sheet_id = '1PkE5F7MWh-nS67w-PKAxgaYXsdleA_mdD_QpZUI8aAQ';
var announcement_doc_id = '12qAcj4a-SQ-1Nwd9QyQeCYToXA-objeBrvE58iUg8j8';
var comic_doc_id = '1JF-EUh_yNrbaTyKfwY-1t12MvqKgtjEu8sjq8ZHkS2o';
var work_folder = '16bmSg6V75RwXc6dWlQpWBCxgBWoJ92Fp';
var HTML_folder = '1ewwc7cRepBUsKh-DGxD9rIwir5LC1WzM';
var range_depth = 20;//number should always be at least # coolGroupers + 1
var newsletter_range = 'Form Responses 1!B2:G' + range_depth;
var full_data_range = 'Form Responses 1!A2:G' + range_depth;

//pull data needed to create newlsetter
var WeekNumber = getWeek();
var ann = retrieveAnnouncement(announcement_doc_id);
var com = retrieveComic(comic_doc_id);
if (doSort)
{
 alphabetizeSheet(form_sheet_id, full_data_range);
}
var data = getSpreadsheetData(newsletter_range, form_sheet_id);

//create an array with the tables of the weelky reports
var groupTables = [];
for (i in data) {
  var row = data[i];
  if (row[0])//check that there is contents in this row via the first element, which is 'Name'
     {
       groupTables.push(buildEmailRow(row));
     }
}
//create the HTML file and send the email
var email = buildEmail(AddAnn, AddComic, groupTables, announcement_doc_id, comic_doc_id);



GmailApp.sendEmail("coolgroup-ewi@tudelft.nl", "Newsletter Week " + getWeek(), "Error Rendering Newsletter", {htmlBody: email});//coolgroup
//GmailApp.sendEmail("fabio.sebastiano@gmail.com", "Newsletter Week " + getWeek(), "testing", {htmlBody: email});//fabio
//GmailApp.sendEmail("yoyoultimate@gmail.com", "Newsletter Week " + getWeek(), "testing", {htmlBody: email});//lizzy
//save email to output html file
saveEmail(email, HTML_folder);//comment this if you dont want the output HTML file
//copy the data from the Forms Sheet to the Archive Sheet
updateArchive(full_data_range, form_sheet_id, archive_sheet_id);
//remove the data from the Form Sheet
clearData(form_sheet_id, range_depth);

}//end main


/*-------------------------------------------------------------------------testEmail()------------------------------------------------------------------------------------

Description: Sends a test email to a single recipient of the generated newsletter

Arguments:
-none
Returns:
-none
Notes:
-allows for the creation and sending of an email in the same way as main(), but without performing the cleanup functions main() does such as saving items to the Archive
-should be rewritten in the future to run the same code as main() so that the functions stay coherent (and leave main() to run some cleanup() procedures)
------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
function testEmail(doSort, AddAnn, AddComic) {
//define IDs and ranges for the Google Docs and Sheets
var form_sheet_id = '1nFi6f98GuG_46Xmg3V8WPoY0rtMK4LykOIW5QilFRiY';
var archive_sheet_id = '1PkE5F7MWh-nS67w-PKAxgaYXsdleA_mdD_QpZUI8aAQ';
var announcement_doc_id = '12qAcj4a-SQ-1Nwd9QyQeCYToXA-objeBrvE58iUg8j8';
var comic_doc_id = '1JF-EUh_yNrbaTyKfwY-1t12MvqKgtjEu8sjq8ZHkS2o';
var work_folder = '16bmSg6V75RwXc6dWlQpWBCxgBWoJ92Fp';
var HTML_folder = '1ewwc7cRepBUsKh-DGxD9rIwir5LC1WzM';
var range_depth = 20;//number should always be at least # coolGroupers + 1
var newsletter_range = 'Form Responses 1!B2:G' + range_depth;
var full_data_range = 'Form Responses 1!A2:G' + range_depth;

//pull data needed to create newlsetter
var WeekNumber = getWeek();
var ann = retrieveAnnouncement(announcement_doc_id);
var com = retrieveComic(comic_doc_id);
if (doSort)
{
 alphabetizeSheet(form_sheet_id, full_data_range);
}
var data = getSpreadsheetData(newsletter_range, form_sheet_id);
//create an array with the tables of the weelky reports

var groupTables = [];
for (i in data) {
  var row = data[i];
  if (row[0])//check that there is contents in this row via the first element, which is 'Name'
     {
       groupTables.push(buildEmailRow(row));
     }
}

//create the HTML file and send the email
var email = buildEmail(AddAnn, AddComic, groupTables, announcement_doc_id, comic_doc_id);
//send email
GmailApp.sendEmail("fabio.sebastiano@gmail.com", "Newsletter Week " + getWeek(), "testing", {htmlBody: email});//fabio
//GmailApp.sendEmail("yoyoultimate@gmail.com", "Test Newsletter Week " + getWeek(), "testing", {htmlBody: email});//lizzy
}//end


/*-------------------------------------------------------------------------sendReminder()----------------------------------------------------------------------------------

Description: Sends a reminder email to the CoolGroup to fill in the Google Form

Arguments:
-none
Returns:
-none
Notes:
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
function sendReminder() {
var reminder_doc_id = '1R4l1rokHQLdFt2LmVRIlty-Tew9W6OOPptG3vgVuQcg';
//create the HTML file and send the email
var email = retrieveAnnouncement(reminder_doc_id);
//send email
//GmailApp.sendEmail("yoyoultimate@gmail.com", "Newsletter Submission Reminder", "testing", {htmlBody: email});//lizzy
//GmailApp.sendEmail("fabio.sebastiano@gmail.com", "Newsletter Submission Reminder", "testing", {htmlBody: email});//fabio
GmailApp.sendEmail("coolgroup-ewi@tudelft.nl", "Newsletter Submission Reminder", "Error Sending Email", {htmlBody: email});//coolgroup
}



/*======================================================================Utility Functions================================================================================

These functions are here to test functionalities without sending the newsletter to the entire coolgroup

=======================================================================================================================================================================*/


/*-----------------------------------------------------------------------testAnnouncement()------------------------------------------------------------------------------

Description: Sends an email with only the Announcement box from the Newsletter to test the HTML formatting of the announcement itself

Arguments:
-none
Returns:
-none
Notes:
-needs to be rewritten so it calls the same functions used 
-should no longer be self-contained
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
function testAnnouncement(){
 //open announcement doc
 var announcement = DocumentApp.openById('12qAcj4a-SQ-1Nwd9QyQeCYToXA-objeBrvE58iUg8j8').getBody().getText(); 
 //create email
 var email = [
    '<!DOCTYPE html>',
    '<html>',
    '<head>',
    '<style>',
    'table {width: 800px;margin: 20px;}',
    'table, th, td {border-collapse: collapse;}',
    'th, td {padding: 12px; text-align: left;}',
    'table#t01 tr:nth-child(even) {background-color: #eee;}',
    'table#t01 tr:nth-child(odd) {background-color: #fff;}',
    'table#t01 th {background-color: #00A6D6; color: white;}',
    '</style>',
    '</head>',
    '<body>',
    '<table style="font-family:arial;" id="t01">',
    '<tr>',
    '<th style="text-align:center">Announcements</th>',
    '</tr>',
    '<tr style = "background-color: #eee;">',
    '<td>' + announcement + '</td>',
    '</tr>',
    '</table>',
    '</body>',
    '</html>'
  ].join('\n')
 //send email
 //GmailApp.sendEmail("yoyoultimate@gmail.com", "Announcement Test", "error", {htmlBody: email});//lizzy
 GmailApp.sendEmail("fabio.sebastiano@gmail.com", "Announcement Test", "error", {htmlBody: email});//fabio
}


/*-------------------------------------------------------------------------testThisHTML()----------------------------------------------------------------------------------

Description: Reads from a test format HTML file and sends it as an email to the recipient to test if the format is email-compatible

Arguments:
-none
Returns:
-none
Notes:
-could be linearized (one line)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
/* use this guy to test a new html style file for email compatability */
function testThisHTML(){
 var files = DriveApp.getFilesByName('new-style.html');
 var file = files.next();
 var html = file.getAs('text/html');
 var email = html.getDataAsString()
 GmailApp.sendEmail("yoyoultimate@gmail.com", "HTML Test", "error", {htmlBody: email});//lizzy
}


/*=======================================================================Bundle Functions=================================================================================

These functions execute the functions to perform general groups of tasks. This aliasing is done to keep testEmail and sendAnnouncement congruent

========================================================================================================================================================================*/




/*=======================================================================Helper Functions=================================================================================

These functions perform the heavy-lifting of the script such as reading from the Google Sheets/Docs, compiling the newsletter HTML file, etc

========================================================================================================================================================================*/


/*-------------------------------------------------------------------------getWeek()----------------------------------------------------------------------------------

Description: Calculates the week number using Date() and Math functions, which is returned as an integer

Arguments:
-none
Returns:
-([week number] integer)
Notes:
-credits to Jarva for writing this function
---------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
function getWeek() {
  var d = new Date();
  d.setHours(0, 0, 0);
  d.setDate(d.getDate() + 4 - (d.getDay() || 7));
  return Math.ceil((((d - new Date(d.getFullYear(), 0, 1)) / 8.64e7) + 1) / 7);
}


/*-----------------------------------------------------------retrieveAnnouncement()-------------------------------------------------------------------------------------

Description: Grabs the announcement from the Announcement Google Doc as a string

Arguments:
-doc_id([GoogleDocId] string)
Returns:
-announcement(string)
Notes:
----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
function retrieveAnnouncement(doc_id){
  var announcement = DocumentApp.openById(doc_id).getBody().getText();
  return announcement
}


/*--------------------------------------------------------------------retrieveComic()-------------------------------------------------------------------------------------

Description: Grabs the comic URL from the Comic Google Doc as a string

Arguments:
-doc_id([GoogleDocId] string)
Returns:
-comic(string)
Notes:
----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
function retrieveComic(doc_id){
  var comic = DocumentApp.openById(doc_id).getBody().getText();
  return comic
}


/*------------------------------------------------------------------getSpreadsheetData()--------------------------------------------------------------------------------- 

Description: getSpreadsheetData() returns the values from the specified range of the specified sheet as a [string?] array

Arguments:
-range([GoogeSheetRange] string)
-sheet_id([GoogleSheetId] string)
Returns:
-([array] string)
Notes:
---------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
function getSpreadsheetData(range, sheet_id) {
  var data_range = SpreadsheetApp.openById(sheet_id).getRange(range);
  return data_range.getValues()
}


/*-------------------------------------------------------buildEmailRow()-----------------------------------------------------------------------------------------------

Description: buildEmailRow() writes the tables that contain the weekly report data in HTML as a string array

Arguments:
-row([weekly report data item] string)
Returns:
-([HTML] string)
Notes:
----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
function buildEmailRow(row) {
  return [
    '<table style="font-family:arial;" id="t01">',
    '<tr>',
    '<th>' + row[0] + ', ' + row[1] + '</th>',
    '<th>Project Name: ' + row[2] + '</th>',
    '</tr>',
    '<tr style = "background-color: #eee;">',
    '<td><b>This Week\'s Achievement</b></td>',
    '<td width=\"67%\">' + row[3] + '</td>',
    '</tr>',
    '<tr style = "background-color: #fff;">',
    '<td><b>This Week\'s Problem(s)</b></td>',
    '<td>' + row[4] + '</td>',
    '</tr>',
    '<tr style = "background-color: #eee;">',
    '<td><b>Next Week\'s Plan</b></td>',
    '<td>' + row[5] + '</td>',
    '</tr>',
    '</table>'
  ].join('\n')
}


/*---------------------------------------------------------buildEmailHead()-------------------------------------------------------------------------------------------

Description: Writes the header for the HTML file, which includes the CSS definitions for the tables/overall layout of the file, as a string array

Arguments:
-none
Returns:
-([HTML] string)
Notes:
-uncomment "'th {font-size:125%}'," if destination is gmail
---------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
function buildEmailHead() {
  return [
    '<!DOCTYPE html>',
    '<html>',
    '<head>',
    '<style>',
    'table {width: 800px;margin: 20px;}',
    'table, th, td {border-collapse: collapse;}',
    'th, td {padding: 12px; text-align: left;}',
    /*'th {font-size:125%}',*/
    'table#t01 tr:nth-child(even) {background-color: #eee;}',
    'table#t01 tr:nth-child(odd) {background-color: #fff;}',
    'table#t01 th {background-color: #00A6D6; color: white;}',
    '</style>',
    '</head>'
  ].join('\n')
}


/*---------------------------------------------------------buildEmailAnn()-------------------------------------------------------------------------------------------

Description: Writes the header for the HTML file, which includes the CSS definitions for the tables/overall layout of the file, as a string array

Arguments:
-ann_doc_id([GoogleDocId] string)
Returns:
-([HTML] string)
Notes:
-add "font-size:125%;" to 'th style' if destination is gmail
---------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
function buildEmailAnn(ann_doc_id) {
  return [
    '<table style="font-family:arial;" id="t01">',
    '<tr>',
    '<th style="text-align:center">Announcements</th>',
    '</tr>',
    '<tr style = "background-color: #eee;">',
    '<td>' + retrieveAnnouncement(ann_doc_id) + '</td>',
    '</tr>',
    '</table>'
  ].join('\n')
}


/*---------------------------------------------------------buildEmailComic()--------------------------------------------------------------------------------------------

Description: Writes the header for the HTML file, which includes the CSS definitions for the tables/overall layout of the file, as a string array

Arguments:
-comic_doc_id([GoogleDocId] string)
Returns:
-([HTML] string)
Notes:
-add "font-size:125%;" to 'th style' if destination is gmail
----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
function buildEmailComic(com_doc_id) {
  return [
    '<table style="font-family:arial;" id="t01">',
    '<tr>',
    '<th style="text-align:center">Comic of the Week</th>',
    '</tr>',
    '<tr style = "background-color: #eee;">',
    '<td style="text-align:center"><img src="' + retrieveComic(com_doc_id) + '" alt="You win this round, [email client name]" width="776"></td>',
    '</tr>',
    '</table>'
  ].join('\n')
}


/*---------------------------------------------------------buildEmail()--------------------------------------------------------------------------------------------------

Description: Writes all of the HTML for the email as a string array

Arguments:
-ann(boolean)
-comic(boolean)
-groupTables([Google Sheet rows] string array)
-ann_doc_id([GoogleDocId] string)
-com_doc_id([GoogleDocId] string)
Returns:
-([HTML] string)
Notes:
-uses the [A?B:C] conditional to enable or disable the tables correspoding to the announcement and comic
------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
function buildEmail(ann, comic, groupTables, ann_doc_id, com_doc_id) {
  return [
    buildEmailHead(),
    '<body>',
    '<h2 style="font-family:arial;">CoolGroup Newsletter Week ' + getWeek() + '</h2>',
    ann ? buildEmailAnn(ann_doc_id) : ' ',
    groupTables.join('\n'),    
    comic ? buildEmailComic(com_doc_id) : ' ',
    '<h5 style="font-family:arial;"> Software Copyright Lizzy Hatfield 2018 </h5>',
    '</body>',
    '</html>'
  ].join('\n')
}


/*-------------------------------------------------------------------------saveEmail()-------------------------------------------------------------------------------------

Description: Creates the physical HTML file out of the HTML code that was generated before

Arguments:
-email([HTML] string)
-dest_id([GoogleFolderId] string)
Returns:
-nothing
Notes:
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
function saveEmail(email, dest_id) {
  var folder = DriveApp.getFolderById(dest_id) 
  var date = new Date();     
  folder.createFile('newsletter-wk' + getWeek() + '-' + date.getFullYear() +'.html', email, MimeType.HTML)
}


/*-----------------------------------------------------------updateArchive()------------------------------------------------------------------------------------------------

Description: Appends a new row of data to the Archive Sheet

Arguments:
-source_range([GoogeSheetRange] string)
-source_id([GoogeSheetId] string)
-dest_id([GoogeSheetId] string)
Returns:
-nothing
Notes:
-check for row[0] not being null, as the name field will be filled for every valid entry into the Form Sheet
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
function updateArchive(source_range, source_id, dest_id) {
  var dest_sheet = SpreadsheetApp.openById(dest_id);
  var source_data = getSpreadsheetData(source_range, source_id);
  for (i in source_data) {
    var row = source_data[i];
    if (row[0])//if row[0] == anything
    {
      dest_sheet.appendRow(row) 
    }
  }   
}


/*--------------------------------------------------------------------clearData()------------------------------------------------------------------------------------------

Description: Deletes the rows of the Form Sheet in ascending order

Arguments:
-id([GoogeSheetId] string)
-depth([unsigned] integer)
Returns:
-nothing
Notes:
-if the function is reversed, only every other row is deleted, as the N+1 row fills the Nth row once it is deleted, then the algorithm deletes the contents of row N+1, etc
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
function clearData(id, depth) {
  var sheet = SpreadsheetApp.openById(id)
  var i;
  for (i = depth ; i > 1 ; i--) 
  {
    sheet.deleteRow(i);
  }
}


/*--------------------------------------------------------------------alphabetizeSheet()------------------------------------------------------------------------------------

Description: Sorts the rows of the Form Sheet alpabetically by name

Arguments:
-sheet_id([GoogeSheetId] string)
-sort_range([unsigned] integer)
Returns:
-nothing
Notes:
-two is for the second column which holds the 'Name' field of the Form data
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
function alphabetizeSheet(sheet_id, sort_range){
  var data = SpreadsheetApp.openById(sheet_id).getRange(sort_range);
  data.sort(2);  
}


